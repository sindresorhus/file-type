%!PS-Adobe-2.0 EPSF-1.2%%Creator: Adobe Illustrator 88(TM) 1.6%%For: (Timothy A. Tedder) ()%%Title: (earth)%%CreationDate: (10/19/88) (2:29 PM)%%DocumentProcSets: Adobe_packedarray 0 0%%DocumentSuppliedProcSets: Adobe_packedarray 0 0%%DocumentProcSets: Adobe_cmykcolor 0 0%%DocumentSuppliedProcSets: Adobe_cmykcolor 0 0%%DocumentProcSets: Adobe_cshow 0 0%%DocumentSuppliedProcSets: Adobe_cshow 0 0%%DocumentProcSets: Adobe_customcolor 0 0%%DocumentSuppliedProcSets: Adobe_customcolor 0 0%%DocumentProcSets: Adobe_Illustrator_881 0 0%%DocumentSuppliedProcSets: Adobe_Illustrator_881 0 0%%ColorUsage: Black&White%%DocumentProcessColors: Black%%BoundingBox:119 246 394 521%%TemplateBox:288 360 288 360%%TileBox:-552 730 0 1460%%EndComments%%BeginProcSet: Adobe_packedarray 0 0% packedarray Operators% Version 1.0 5/9/1988% Copyright (C) 1987, 1988% Adobe Systems Incorporated% All Rights Reserveduserdict /Adobe_packedarray 5 dict dup begin put/initialize			% - initialize -{/packedarray where	{	pop	}	{	Adobe_packedarray begin	Adobe_packedarray		{		dup xcheck			{			bind			} if		userdict 3 1 roll put		} forall	end	} ifelse} def/terminate			% - terminate -{} def/packedarray		% arguments count packedarray array{array astore readonly} def/setpacking			% boolean setpacking -{pop} def/currentpacking		% - setpacking boolean{false} defcurrentdict readonly pop end%%EndProcSetAdobe_packedarray /initialize get exec%%BeginProcSet:Adobe_cmykcolor 0 0% cmykcolor Operators% Version 1.0 5/9/1988% Copyright (C) 1987, 1988% Adobe Systems Incorporated% All Rights Reservedcurrentpacking true setpackinguserdict /Adobe_cmykcolor 4 dict dup begin put/initialize			% - initialize -{/setcmykcolor where	{	pop	}	{	userdict /Adobe_cmykcolor_vars 2 dict dup begin put	/_setrgbcolor		/setrgbcolor load def	/_currentrgbcolor		/currentrgbcolor load def	Adobe_cmykcolor begin	Adobe_cmykcolor		{		dup xcheck			{			bind			} if		pop pop		} forall	end	end	Adobe_cmykcolor begin	} ifelse} def/terminate			% - terminate -{currentdict Adobe_cmykcolor eq	{	end	} if} def/setcmykcolor		% cyan magenta yellow black setcmykcolor -{1 sub 4 1 roll3	{	3 index add neg dup 0 lt		{		pop 0		} if	3 1 roll	} repeatAdobe_cmykcolor_vars /_setrgbcolor get execpop} def /currentcmykcolor	% - currentcmykcolor cyan magenta yellow black{Adobe_cmykcolor_vars /_currentrgbcolor get exec3	{	1 sub neg 3 1 roll	} repeat0} defcurrentdict readonly pop endsetpacking%%EndProcSet%%BeginProcSet: Adobe_cshow 0 0% cshow Operator% Version 1.0 5/9/1988% Copyright (C) 1987, 1988% Adobe Systems Incorporated% All Rights Reservedcurrentpacking true setpackinguserdict /Adobe_cshow 3 dict dup begin put/initialize			% - initialize -{/cshow where	{	pop	}	{	userdict /Adobe_cshow_vars 1 dict dup begin put	/_cshow		% - _cshow proc		{} def	Adobe_cshow begin	Adobe_cshow		{		dup xcheck			{			bind			} if		userdict 3 1 roll put		} forall	end	end	} ifelse} def/terminate			% - terminate -{} def/cshow				% string proc cshow -{Adobe_cshow_vars	exch /_cshow	exch put	{	0 0 Adobe_cshow_vars /_cshow get exec	} forall} defcurrentdict readonly pop endsetpacking%%EndProcSet%%BeginProcSet: Adobe_customcolor 0 0% Custom Color Operators% Version 1.0 5/9/1988% Copyright (C) 1987, 1988% Adobe Systems Incorporated% All Rights Reservedcurrentpacking true setpackinguserdict /Adobe_customcolor 5 dict dup begin put/initialize			% - initialize -{/setcustomcolor where	{	pop	}	{	Adobe_customcolor begin	Adobe_customcolor		{		dup xcheck			{			bind			} if		pop pop		} forall	end	Adobe_customcolor begin	} ifelse} def/terminate			% - terminate -{currentdict Adobe_customcolor eq	{	end	} if} def/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object{5 packedarray}  def/setcustomcolor		% object tint setcustomcolor -{exchaload pop pop4	{	4 index mul 4 1 roll	} repeat5 -1 roll popsetcmykcolor} def/setoverprint		% boolean setoverprint -{pop} defcurrentdict readonly pop endsetpacking%%EndProcSet%%BeginProcSet: Adobe_Illustrator881 0 0% Adobe Illustrator (TM) Prolog% Version 1.0 5/9/1988% Copyright (C) 1987, 1988% Adobe Systems Incorporated% All Rights Reservedcurrentpacking true setpackinguserdict /Adobe_Illustrator881 72 dict dup begin put% initialization/initialize				% - initialize -{userdict /Adobe_Illustrator881_vars 29 dict dup begin put% paint operands/_lp /none def/_pf {} def/_ps {} def/_psf {} def/_pss {} def% text operands/_a null def/_as null def/_tt 2 array def/_tl 2 array def/_tm matrix def/t {} def% color operands/_gf null def/_cf 4 array def/_if null def/_of false def/_fc {} def/_gs null def/_cs 4 array def/_is null def/_os false def/_sc {} def/_i null defAdobe_Illustrator881 beginAdobe_Illustrator881	{	dup xcheck		{		bind		} if	pop pop	} forallendendAdobe_Illustrator881 beginAdobe_Illustrator881_vars beginnewpath} def/terminate				% - terminate -{endend} def% definition operators/_					% - _ nullnull def/ddef				% key value ddef -{Adobe_Illustrator881_vars 3 1 roll put} def/xput				% key value literal xput -{dup load dup length exch maxlength eq	{	dup dup load dup	length 2 mul dict copy def	} ifload begin def end} def/npop				% integer npop -{	{	pop	} repeat} def% marking operators/sw					% ax ay length string sw x y{stringwidthexch 5 -1 roll 3 index 1 sub mul add4 1 roll 3 1 roll 1 sub mul add} def/ss					% ax ay length string matrix ss -{3 -1 roll pop4 1 roll	{	2 npop (0) exch	2 copy 0 exch put pop	gsave	false charpath	currentpoint	4 index setmatrix	stroke	grestore	moveto	2 copy rmoveto	} cshow3 npop} def% path operators/sp					% ax ay length string sp -{exch pop	{	2 npop (0) exch	2 copy 0 exch put pop	false charpath	2 copy rmoveto	} cshow2 npop} def% path construction operators/pl					% x y pl x y{transform0.25 sub round 0.25 add exch0.25 sub round 0.25 add exchitransform} def/setstrokeadjust where{pop true setstrokeadjust/c				% x1 y1 x2 y2 x3 y3 c -{curveto} def/C/c load def/v				% x2 y2 x3 y3 v -{currentpoint 6 2 roll curveto} def/V/v load def/y				% x1 y1 x2 y2 y -{2 copy curveto} def/Y/y load def/l				% x y l -{lineto} def/L/l load def/m				% x y m -{moveto} def}{/c{pl curveto} def/C/c load def/v{currentpoint 6 2 roll pl curveto} def/V/v load def/y{pl 2 copy curveto} def/Y/y load def/l{pl lineto} def/L/l load def/m{pl moveto} def} ifelse% graphic state operators/d					% array phase d -{setdash} def/cf					% - cf flatnesscurrentflat def/i					% flatness i -{dup 0 eq	{	pop cf	} ifsetflat} def/j					% linejoin j -{setlinejoin} def/J					% linecap J -{setlinecap} def/M					% miterlimit M -{setmiterlimit} def/w					% linewidth w -{setlinewidth} def% path painting operators/H					% - H -{} def/h					% - h -{closepath} def/N					% - N -{newpath} def/n					% - n -/N load def/F					% - F -{_pf} def/f					% - f -{closepathF} def/S					% - S -{_ps} def/s					% - s -{closepathS} def/B					% - B -{gsave F grestoreS} def/b					% - b -{closepathB} def/W					% - W -{clip} def% text painting operators/ta					% length string ta ax ay length string{_as moveto_tt aload pop 4 -2 roll} def/tl					% - tl -{_tl aload pop translate} def/as					% - as array{{0 0}{2 copy _tt aload pop 4 -2 roll swexch neg 2 div exch neg 2 div}{2 copy _tt aload pop 4 -2 roll swexch neg exch neg}{0 0}} cvlit def/z					% literal size leading tracking align z -{/_a exch ddef/_as as _a get ddef_a 2 le	{	0 _tt astore pop	0 exch neg _tl astore pop	}	{	0 exch neg _tt astore pop	neg 0 _tl astore pop	} ifelseexch findfont exch scalefont setfont} def/tm					% matrix tm -{_tm currentmatrix popconcat} def/I					% matrix I -{tm/t	{	ta sp	tl	} ddef} def/o					% matrix o -{tm/t	{	ta 4 npop	tl	newpath	} ddef} def/e					% matrix e -{tm/t	{	ta _psf	tl	newpath	} ddef} def/r					% matrix r -{tm/t	{	ta _tm _pss	tl	newpath	} ddef} def/a					% matrix a -{tm/t	{	2 copy	ta _psf	newpath	ta _tm _pss	tl	newpath	} ddef} def/T					% - T -{_tm setmatrix} def% font operators/Z					% array literal literal direction Z -{popfindfont begincurrentdict dup length 1 add dict begin	{	1 index /FID ne		{		def		}		{		2 npop		} ifelse	} forall/FontName exch def dup length 0 ne	{	/Encoding Encoding 256 array copy def	0 exch		{		dup type /nametype eq			{			Encoding 2 index 2 index put pop			1 add			}			{			exch pop			} ifelse		} forall	} if popcurrentdict dup end end/FontName get exch definefont pop} def% group operators/u					% - u -{} def/U					% - U -{} def/q					% - q -{gsave} def/Q					% - Q -{grestore} def% place operators/`					% matrix llx lly urx ury string ` -{/_i save ddef6 1 roll 4 npopconcatuserdict begin/showpage {} deffalse setoverprintpop} def/~					% - ~ -{end_i restore} def% color operators/O					% flag O -{0 ne/_of exch ddef/_lp /none ddef} def/R					% flag R -{0 ne/_os exch ddef/_lp /none ddef} def/g					% gray g -{/_gf exch ddef/_fc{_lp /fill ne	{	_of setoverprint	_gf setgray	/_lp /fill ddef	} if} ddef/_pf{_fcfill} ddef/_psf{_fcexch popashow} ddef/_lp /none ddef} def/G					% gray G -{/_gs exch ddef/_sc{_lp /stroke ne	{	_os setoverprint	_gs setgray	/_lp /stroke ddef	} if} ddef/_ps{_scstroke} ddef/_pss{_scss} ddef/_lp /none ddef} def/k					% cyan magenta yellow black k -{_cf astore pop/_fc{_lp /fill ne	{	_of setoverprint	_cf aload pop setcmykcolor	/_lp /fill ddef	} if} ddef/_pf{_fcfill} ddef/_psf{_fcexch popashow} ddef/_lp /none ddef} def/K					% cyan magenta yellow black K -{_cs astore pop/_sc{_lp /stroke ne	{	_os setoverprint	_cs aload pop setcmykcolor	/_lp /stroke ddef	} if} ddef/_ps{_scstroke} ddef/_pss{_scss} ddef/_lp /none ddef} def/x					% cyan magenta yellow black name gray x -{/_gf exch ddeffindcmykcustomcolor/_if exch ddef/_fc{_lp /fill ne	{	_of setoverprint	_if _gf 1 exch sub setcustomcolor	/_lp /fill ddef	} if} ddef/_pf{_fcfill} ddef/_psf{_fcexch popashow} ddef/_lp /none ddef} def/X					% cyan magenta yellow black name gray X -{/_gs exch ddeffindcmykcustomcolor/_is exch ddef/_sc{_lp /stroke ne	{	_os setoverprint	_is _gs 1 exch sub setcustomcolor	/_lp /stroke ddef	} if} ddef/_ps{_scstroke} ddef/_pss{_scss} ddef/_lp /none ddef} def% locked object operators/A					% value A -{pop} defcurrentdict readonly pop endsetpacking%%EndProcSet%%EndProlog%%BeginSetupAdobe_cmykcolor /initialize get execAdobe_cshow /initialize get execAdobe_customcolor /initialize get execAdobe_Illustrator881 /initialize get exec%%EndSetup0 Auq0 O0 g0 R0 G0 i 0 J 0 j 1 w 4 M []0 d%%Note:289.7483 499.934 m323.3996 489.1332 350.8221 464.5488 364.8541 432.0545 c390.3671 372.9737 360.4601 299.753 300.8926 274.7434 c241.5687 249.836 167.9347 279.1117 143.7827 339.0235 c134.3854 362.3347 131.6141 386.862 137.3373 411.8925 c145.5155 447.6591 157.8251 467.6706 191.9297 487.7602 c222.0044 505.476 256.5007 510.6053 289.7483 499.934 chWn0.2 g120.6329 385.5208 m120.6329 459.3289 180.4681 519.164 254.2761 519.164 c328.0841 519.164 387.9193 459.3289 387.9193 385.5208 c387.9193 311.7128 328.0841 251.8777 254.2761 251.8777 c180.4681 251.8777 120.6329 311.7128 120.6329 385.5208 cfu0.2227 g132.0236 388.6477 m132.0236 457.0886 187.5077 512.5727 255.9486 512.5727 c324.3895 512.5727 379.8736 457.0886 379.8736 388.6477 c379.8736 320.2068 324.3895 264.7227 255.9486 264.7227 c187.5077 264.7227 132.0236 320.2068 132.0236 388.6477 cf0.2454 g143.4163 391.7751 m143.4163 454.8479 194.5486 505.9802 257.6214 505.9802 c320.6943 505.9802 371.8265 454.8479 371.8265 391.7751 c371.8265 328.7022 320.6943 277.5699 257.6214 277.5699 c194.5486 277.5699 143.4163 328.7022 143.4163 391.7751 cf0.2682 g154.8089 394.9025 m154.8089 452.6072 201.5894 499.3878 259.2942 499.3878 c316.999 499.3878 363.7795 452.6072 363.7795 394.9025 c363.7795 337.1977 316.999 290.4172 259.2942 290.4172 c201.5894 290.4172 154.8089 337.1977 154.8089 394.9025 cf0.2909 g166.2015 398.0298 m166.2015 450.3666 208.6302 492.7953 260.967 492.7953 c313.3037 492.7953 355.7324 450.3666 355.7324 398.0298 c355.7324 345.6931 313.3037 303.2644 260.967 303.2644 c208.6302 303.2644 166.2015 345.6931 166.2015 398.0298 cf0.3136 g177.5941 401.1572 m177.5941 448.1259 215.671 486.2028 262.6398 486.2028 c309.6085 486.2028 347.6854 448.1259 347.6854 401.1572 c347.6854 354.1885 309.6085 316.1116 262.6398 316.1116 c215.671 316.1116 177.5941 354.1885 177.5941 401.1572 cf0.3364 g188.9868 404.2846 m188.9868 445.8853 222.7119 479.6104 264.3125 479.6104 c305.9132 479.6104 339.6383 445.8853 339.6383 404.2846 c339.6383 362.6839 305.9132 328.9588 264.3125 328.9588 c222.7119 328.9588 188.9868 362.6839 188.9868 404.2846 cf0.3591 g200.3794 407.412 m200.3794 443.6446 229.7527 473.0179 265.9853 473.0179 c302.218 473.0179 331.5913 443.6446 331.5913 407.412 c331.5913 371.1793 302.218 341.806 265.9853 341.806 c229.7527 341.806 200.3794 371.1793 200.3794 407.412 cf0.3818 g211.772 410.5393 m211.772 441.404 236.7935 466.4255 267.6581 466.4255 c298.5227 466.4255 323.5442 441.404 323.5442 410.5393 c323.5442 379.6748 298.5227 354.6532 267.6581 354.6532 c236.7935 354.6532 211.772 379.6748 211.772 410.5393 cf0.4045 g223.1646 413.6667 m223.1646 439.1633 243.8343 459.833 269.3309 459.833 c294.8274 459.833 315.4972 439.1633 315.4972 413.6667 c315.4972 388.1702 294.8274 367.5005 269.3309 367.5005 c243.8343 367.5005 223.1646 388.1702 223.1646 413.6667 cf0.4273 g234.5573 416.7941 m234.5573 436.9226 250.8752 453.2405 271.0037 453.2405 c291.1322 453.2405 307.4501 436.9226 307.4501 416.7941 c307.4501 396.6656 291.1322 380.3477 271.0037 380.3477 c250.8752 380.3477 234.5573 396.6656 234.5573 416.7941 cfU0.45 g245.948 419.921 m245.948 434.6824 257.9148 446.6492 272.6762 446.6492 c287.4376 446.6492 299.4044 434.6824 299.4044 419.921 c299.4044 405.1596 287.4376 393.1927 272.6762 393.1927 c257.9148 393.1927 245.948 405.1596 245.948 419.921 cfQ0 O0 g0 R0 G0 i 0 J 0 j 1 w 4 M []0 d%%Note:289.7483 499.934 m323.3996 489.1332 350.8221 464.5488 364.8541 432.0545 c390.3671 372.9737 360.4601 299.753 300.8926 274.7434 c241.5687 249.836 167.9347 279.1117 143.7827 339.0235 c134.3854 362.3347 131.6141 386.862 137.3373 411.8925 c145.5155 447.6591 157.8251 467.6706 191.9297 487.7602 c222.0044 505.476 256.5007 510.6053 289.7483 499.934 cs1 g0.5 w262.9362 494.878 m263.9038 495.9616 264.029 497.0776 263.6135 497.9427 c262.428 500.4107 259.8451 498.5589 258.7761 497.0208 C258.1363 498.4351 256.8504 498.1583 255.8006 497.9151 c255.004 497.7306 254.317 496.9224 254.8631 496.077 c255.6469 494.8637 256.6282 493.6156 257.8426 493.2309 c259.3329 492.7589 260.7498 492.4297 262.9362 494.878 cb246.261 490.0954 m247.0191 495.3287 247.1764 499.5381 251.6501 503.1758 c252.3093 503.7118 251.5041 504.8194 250.7648 504.878 c246.1479 505.2436 237.1615 504.8332 235.8237 502.4362 c233.7228 498.6722 235.8776 491.4663 241.0037 488.4015 c242.3837 487.5763 245.7645 486.6679 246.261 490.0954 cb221.7933 487.0311 m222.2423 486.2785 222.8567 485.611 223.7408 486.0865 c226.5326 487.588 222.6996 489.3542 223.7761 491.0208 C225.1099 489.6871 226.4425 488.3545 227.7761 487.0208 C231.1632 492.2806 223.8779 497.3235 220.359 499.2646 c216.5141 501.3856 212.9676 494.4472 210.7761 492.0208 C214.6938 490.2114 219.1382 491.4814 221.7933 487.0311 cb219.4496 475.1803 m217.2548 480.8589 214.9571 485.8608 209.5444 487.2241 c208.3401 487.5274 205.9487 484.81 204.9404 482.783 c202.4377 477.752 209.3265 475.0647 207.878 471.2099 c206.695 468.0619 206.5051 464.2489 204.3433 461.1545 c203.4441 459.8674 201.5381 461.562 200.8447 462.9608 c200.1052 464.4525 201.7189 466.7855 199.6509 467.7631 c195.4009 469.7723 187.4771 470.989 188.3149 476.8093 c188.9238 481.0387 195.1368 482.9055 195.5333 487.9101 c195.5857 488.5717 194.6187 489.3568 193.776 488.8036 c182.5886 481.4583 171.3027 475.5423 163.0261 465.3958 c147.0595 445.8222 132.091 418.4364 140.7136 391.8958 C144.2369 398.2317 136.3142 404.56 140.7136 410.8958 C143.3919 402.1176 145.3569 393.5363 152.2552 386.4497 c152.8715 385.8166 150.907 382.7934 151.947 381.0338 c155.1274 375.6534 161.797 374.5592 167.7136 374.8958 C167.2928 371.7261 170.0157 369.9832 171.8688 369.3494 c180.6928 366.3307 187.049 360.8411 194.8662 356.1501 c196.9756 354.8843 196.2676 358.8141 197.6913 358.672 c205.2502 357.9173 205.856 350.0908 207.0701 343.9665 c207.3868 342.3684 210.0023 341.4284 210.3812 339.8177 c211.3784 335.5789 209.4697 330.6396 211.3356 327.2369 c216.4342 317.9387 231.7717 315.7572 234.4636 306.6458 c237.7136 295.6458 237.5532 281.9055 241.9621 269.9878 c242.5616 268.3672 244.1946 266.5581 245.7822 266.2557 c248.9949 265.6439 260.1357 265.6306 262.4584 266.5446 c268.1426 268.7815 275.9636 274.3958 276.6494 278.1308 c279.1081 291.5213 288.3125 290.4866 292.0735 297.2517 c293.3588 299.5637 293.0046 303.4012 292.2678 307.009 c291.3356 311.5736 296.06 314.2964 298.3463 318.1157 c299.4239 319.916 301.023 323.1725 299.3826 324.4808 c291.6107 330.6793 282.2473 333.5366 272.7136 329.8958 C271.679 333.3266 275.1378 336.3038 273.0433 340.0788 c272.4035 341.232 273.1099 343.5575 273.085 344.8841 c272.927 353.3242 268.3777 361.9687 257.7574 362.615 c254.4437 362.8166 254.3365 368.8336 250.6923 370.8573 c242.0101 375.6786 234.0391 370.1833 225.7136 367.8958 C225.6417 368.9832 226.1112 370.7205 224.7233 370.6631 c217.2654 370.354 208.1444 366.1258 207.7136 357.8958 C205.0878 359.1552 203.941 362.5496 200.7082 362.8338 c198.3213 363.0437 196.072 360.9694 193.7825 362.0426 c192.5648 362.6134 191.3771 363.7481 190.8861 364.9654 c189.7628 367.7501 192.5051 371.6355 189.5049 373.5725 c187.0301 375.1703 182.2637 372.1887 181.3511 375.0959 c180.5628 377.607 186.6741 382.6222 183.457 384.4423 c180.6287 386.0426 177.4147 384.1035 174.3916 382.5047 c167.5434 378.883 161.5311 387.4385 160.3434 394.0097 c159.1788 400.4532 161.181 408.6551 167.8732 411.5235 c171.8335 413.221 176.6781 409.4493 180.5016 411.3275 c182.4996 412.309 184.905 413.7755 186.4141 412.5323 c189.4681 410.016 193.6844 409.3116 195.5327 405.8006 c196.6171 403.7409 194.2784 400.8098 196.8082 399.0303 c196.8784 398.9809 197.3786 399.5608 197.7136 399.8958 C197.1685 396.2387 199.6003 393.3354 200.7136 389.8958 C201.7147 390.8969 203.155 391.7468 203.481 392.9585 c205.4984 400.456 199.5463 408.4574 202.7416 414.3372 c206.2251 420.7472 209.5076 426.8985 213.018 433.7397 c214.4742 436.5776 217.1338 438.6911 219.7963 440.791 c220.5525 441.3875 221.0831 440.4498 221.7747 439.987 c222.6111 439.4272 223.6213 440.2459 223.5098 440.8587 c223.3982 441.4718 222.2018 442.341 222.8303 442.6783 c226.2465 444.5119 228.1605 447.4301 230.7136 449.8958 C226.2239 453.2582 220.035 448.8928 216.7136 444.8958 C222.8849 449.8136 225.1703 460.8635 234.7136 456.8958 C235.8882 460.7527 241.8715 459.8852 241.7252 461.8211 c241.1125 469.9232 231.998 474.5171 226.7136 480.8958 C225.5663 479.0559 225.4812 476.7725 224.4154 475.0841 c223.5966 473.7867 221.5572 469.7268 219.4496 475.1803 cb249.7922 448.0593 m250.7217 447.6692 251.505 448.2479 251.6604 449.0434 c252.5609 453.653 247.2679 453.2509 245.7761 456.0208 C245.4394 455.6842 245.1038 455.1253 244.78 455.1363 c243.1977 455.1898 244.2984 458.0949 242.829 457.7765 c239.4154 457.037 241.9164 452.8662 239.7761 451.0208 C243.0007 449.6536 246.5276 449.4293 249.7922 448.0593 cb298.6886 481.156 m301.8026 483.1714 298.3354 486.4673 296.7543 486.539 c294.9557 486.6204 295.7592 483.6663 295.958 482.0431 c296.1208 480.7135 297.7139 480.5252 298.6886 481.156 cb304.3822 481.1275 m304.1183 480.1533 303.6413 479.0982 303.8806 478.0446 c304.229 476.5104 306.2117 476.7436 306.4942 477.1966 c308.2003 479.9326 310.5241 479.3387 311.3297 482.1488 c312.842 487.4244 305.5648 486.3447 302.9461 489.1779 c302.4362 489.7297 302.9557 491.0518 302.6863 491.9952 c302.4607 492.7855 301.5234 493.5389 300.8982 492.9012 c296.0264 487.9319 305.7106 486.0319 304.3822 481.1275 cb315.7649 478.9803 m313.119 479.7079 312.3219 477.2227 310.7761 476.0208 C311.4426 475.3543 312.0104 474.3835 312.8164 474.182 c314.7507 473.6985 316.9925 474.5319 318.6585 473.7653 c322.1959 472.1373 323.7502 467.5142 323.1033 464.1502 c321.9755 458.2864 315.0336 460.6195 309.8228 459.7433 c308.6534 459.5467 307.5293 458.1711 306.9075 456.9537 c306.0205 455.2169 308.1732 454.2713 308.4612 452.9521 c309.2362 449.4015 308.3715 443.9141 311.8068 443.7742 c315.7832 443.6122 318.925 447.4477 323.7822 447.3605 c324.7653 447.3429 326.4761 449.0554 326.4241 450.0014 c326.1186 455.55 325.1462 461.5031 330.0952 464.4926 c333.6101 466.6157 339.2649 466.0933 342.948 463.2429 c343.1583 463.0802 344.2775 464.2138 343.6656 464.9259 c336.0389 473.8014 327.6993 480.4107 317.7184 486.9325 c316.8765 487.4826 315.8357 486.6016 315.9922 486.0865 c316.3608 484.8728 318.0582 484.1698 318.6295 482.9521 c319.4335 481.2381 318.7872 478.1492 315.7649 478.9803 cb335.8932 456.9075 m335.2636 456.2568 336.0755 455.1817 336.7759 455.1825 c337.4766 455.1833 338.2894 456.2566 337.6589 456.9072 c337.3285 457.2481 336.2223 457.2475 335.8932 456.9075 cb345.6561 451.1443 m346.2943 451.7646 345.4771 452.5368 344.7761 453.0208 C344.3766 451.4521 341.669 452.4946 342.0344 451.0879 c342.6272 448.8055 344.6541 450.1703 345.6561 451.1443 cb345.6136 457.008 m345.744 455.354 347.2075 455.0874 347.7761 454.0208 C350.6015 457.253 347.6156 462.2134 344.7464 462.3383 c342.1785 462.45 345.4673 458.8636 345.6136 457.008 cb339.8964 387.445 m345.2477 385.9283 353.2441 390.7796 354.3547 382.961 c355.0814 377.8452 356.0482 373.4821 358.2538 368.776 c360.6779 363.604 357.6652 357.669 356.2543 352.1543 c355.3741 348.714 352.6667 345.7619 350.041 342.7871 c348.0474 340.5285 348.6645 336.9477 348.2582 333.9554 c347.6854 329.7359 351.5231 321.3322 353.7612 323.2225 c364.6913 332.4542 372.0321 360.5778 373.424 375.0547 c375.4573 396.2029 372.3386 420.5833 360.2041 439.6551 c357.2261 444.3356 350.7969 441.895 345.8619 443.3183 c344.246 443.7844 343.3053 446.2304 341.6876 446.74 c335.3839 448.7257 329.5215 444.5618 324.3494 440.5743 c322.3254 439.0138 320.0442 443.219 316.7913 441.9809 c314.5552 441.1297 314.6569 438.6022 314.1122 436.9125 c313.0832 433.7205 314.2317 430.3247 315.3881 426.8902 c316.3586 424.0074 313.5326 421.4991 312.2302 418.8016 c308.5155 411.1074 311.2912 402.3222 311.2242 394.0172 c311.2136 392.6942 313.2467 390.9395 314.8687 390.2336 c319.5544 388.1944 324.6825 388.2089 329.8298 387.3384 c333.0988 386.7855 336.136 388.5107 339.8964 387.445 cbU%%TrailerAdobe_Illustrator881 /terminate get execAdobe_customcolor /terminate get execAdobe_cshow /terminate get execAdobe_cmykcolor /terminate get exec